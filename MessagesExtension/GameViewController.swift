//
//  GameViewController.swift
//  MessagesExtension
//
//  Created by Ace Green on 9/16/16.
//  Copyright Â© 2016 Ace Green. All rights reserved.
//

import UIKit
import SpriteKit
import Messages

protocol GameDelegate {
    func updateScore(game: Game)
    func gameOver(game: Game)
    func expandView()
    func resetScene(scene: GameScene)
}

class GameViewController: MSMessagesAppViewController, GameDelegate {
    
    @IBOutlet var highScoreLabel: UILabel!
    
    @IBOutlet var currentScoreTextLabel: UILabel!
    @IBOutlet var currentScoreLabel: UILabel!
    
    @IBOutlet var ballImageView: UIImageView!
    @IBOutlet var tapToPlayImageView: UIImageView!
    
    @IBOutlet var currentScoreLabelTopConstraint: NSLayoutConstraint!
    @IBOutlet var currentScoreLabelTrailingConstraint: NSLayoutConstraint!
    @IBOutlet var currentScoreLabelCenterContraint: NSLayoutConstraint!
    
    @IBOutlet var tapGestureRecognizer: UITapGestureRecognizer!
    
    @IBAction func tapGestureRecognizerAction(_ sender: AnyObject) {
        self.requestPresentationStyle(.expanded)
    }
    
    var gameSceneDelegate: GameSceneDelegate?
    
    override func viewDidLoad() {
        super.viewDidLoad()
    }

    func updateScore(game: Game) {
        currentScoreLabel.text = String(game.currentScore)
        highScoreLabel.text = String(game.highScore)
    }
    
    func gameOver(game: Game) {
    
        //let conversation = self.activeConversation
        //$\(conversation!.localParticipantIdentifier.uuidString)
        
        let message = composeMessage(customMessage: "GameOver", caption: "I set a score of \(game.currentScore)!", subCaption: "lets see what you got")
        self.activeConversation?.insert(message)
    }
    
    func expandView() {
        self.requestPresentationStyle(.expanded)
    }
    
    func resetScene(scene: GameScene) {
        self.gameSceneDelegate = scene
        scene.gameDelegate = self
    }
    
//    override func shouldAutorotate() -> Bool {
//        return true
//    }
//    
//    override func supportedInterfaceOrientations() -> UIInterfaceOrientationMask {
//        if UIDevice.currentDevice().userInterfaceIdiom == .Phone {
//            return .AllButUpsideDown
//        } else {
//            return .all
//        }
//    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Release any cached data, images, etc that aren't in use.
    }
    
//    override func prefersStatusBarHidden() -> Bool {
//        return true
//    }
    
    
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
    }
    
    override func didBecomeActive(with conversation: MSConversation) {
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {

        gameSceneDelegate?.gameVCWillTransition(to: presentationStyle)
        
        let skView = self.view as! SKView
        
        switch presentationStyle {
        case .compact:
            
            currentScoreLabelTopConstraint.constant = 15
            currentScoreLabelTrailingConstraint.isActive = true
            currentScoreLabelCenterContraint.isActive = false
            
            currentScoreTextLabel.isHidden = true
            currentScoreLabel.isHidden = true
            ballImageView.isHidden = false
            tapToPlayImageView.isHidden = false
            
            tapGestureRecognizer.isEnabled = true
            
            skView.presentScene(nil)
            
        case .expanded:
            
            currentScoreLabelTopConstraint.constant = 70
            currentScoreLabelTrailingConstraint.isActive = false
            currentScoreLabelCenterContraint.isActive = true
            
            currentScoreTextLabel.isHidden = false
            currentScoreLabel.isHidden = false
            ballImageView.isHidden = true
            tapToPlayImageView.isHidden = true
            
            tapGestureRecognizer.isEnabled = false
            
            if let scene = GameScene(fileNamed:"GameScene") {
                // Configure the view.
                
                // DEBUG Tools
//                #if DEBUG
//                    skView.showsPhysics = true
//                    skView.showsFPS = true
//                    skView.showsNodeCount = true
//                #else
//                #endif
                
                /* Sprite Kit applies additional optimizations to improve rendering performance */
                skView.ignoresSiblingOrder = true
                
                /* Set the scale mode to scale to fit the window */
                scene.scaleMode = .resizeFill
                self.gameSceneDelegate = scene
                scene.gameDelegate = self
                
                skView.presentScene(scene)
            }
        }
    }
    
    override func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {
        gameSceneDelegate?.gameVCWillTansition(to: size)
    }
    
    // MARK:- Helpers
    func composeMessage(customMessage: String, caption: String, subCaption: String?) -> MSMessage {
        var components = URLComponents()
        
        // create a query item from our custom message
        let item = URLQueryItem(name: "MyCustomMessage", value: customMessage)
        
        // put it into an array of query items
        var items = [URLQueryItem]()
        items.append(item)
        components.queryItems = items
        
        // tell messages to use the default message template layout
        let layout = MSMessageTemplateLayout()
        layout.caption = caption
        
        if subCaption != nil {
            layout.subcaption = subCaption
        }
        
        // create a message and tell it the content and layout
        let message = MSMessage()
        message.url = components.url!
        message.layout = layout
        
        // return it for sending
        return message
    }
}
